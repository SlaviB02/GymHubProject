// <auto-generated />
using System;
using GymHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymHub.Data.Migrations
{
    [DbContext(typeof(GymHubDbContext))]
    [Migration("20241114190323_AddedFirstAndLastNameForUsers")]
    partial class AddedFirstAndLastNameForUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymHub.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("The First name of the user");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("The Last name of the user");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GymHub.Data.Models.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the Class");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasComment("The duration of the Class");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the Gym that the class is in");

                    b.Property<string>("Instructor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the Instructor of the class");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("The name of the Class");

                    b.Property<DateTime>("StartTimeAndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Starting time and date of the Class");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit")
                        .HasComment("Flag for seeing if the entity is deleted or not");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1e4b2ff-4d1a-4c2a-a0b2-1f5f4f57e6a9"),
                            Duration = 60,
                            GymId = new Guid("d5f4b10a-42a1-4f63-8c7f-1a7f9bc8e4e0"),
                            Instructor = "Sarah Lee",
                            Name = "Yoga Basics",
                            StartTimeAndDate = new DateTime(2023, 11, 7, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b2c7d8ff-2a3b-4e1d-b0a3-3d6e9a5f9c8d"),
                            Duration = 45,
                            GymId = new Guid("d5f4b10a-42a1-4f63-8c7f-1a7f9bc8e4e0"),
                            Instructor = "Mike Turner",
                            Name = "HIIT Training",
                            StartTimeAndDate = new DateTime(2023, 11, 7, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c3d5e1ff-3a9c-4f3d-c1b4-4e7f6b8f6d8e"),
                            Duration = 50,
                            GymId = new Guid("d5f4b10a-42a1-4f63-8c7f-1a7f9bc8e4e0"),
                            Instructor = "Emily Chen",
                            Name = "Zumba Dance",
                            StartTimeAndDate = new DateTime(2023, 11, 7, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d4a8f2ff-5c4a-4d7d-d2c0-5f9e4b4d7f6f"),
                            Duration = 60,
                            GymId = new Guid("b21d17f5-9c92-4a72-8b77-33c4f08d8df8"),
                            Instructor = "John Adams",
                            Name = "Strength Training",
                            StartTimeAndDate = new DateTime(2023, 11, 7, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e5b1c3ff-6d3b-4f5e-e3a1-6c8e5d6f9c7b"),
                            Duration = 55,
                            GymId = new Guid("b21d17f5-9c92-4a72-8b77-33c4f08d8df8"),
                            Instructor = "Anna Walker",
                            Name = "Pilates Core",
                            StartTimeAndDate = new DateTime(2023, 11, 7, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f6d9e4ff-7e2c-4b6e-f4b2-7d7f8b5f8a7c"),
                            Duration = 40,
                            GymId = new Guid("b21d17f5-9c92-4a72-8b77-33c4f08d8df8"),
                            Instructor = "Tommy Lee",
                            Name = "Cardio Blast",
                            StartTimeAndDate = new DateTime(2023, 11, 7, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a7f3c2ff-8b5d-4d5e-a6c3-8e9d6c7f4e8d"),
                            Duration = 60,
                            GymId = new Guid("f9e5b2ab-7edc-4d33-888f-0ab0c9b9fd0b"),
                            Instructor = "Rachel Green",
                            Name = "CrossFit",
                            StartTimeAndDate = new DateTime(2023, 11, 7, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b8d1e8ff-9c6d-4a7f-b9d4-9f7e4d3f5a6d"),
                            Duration = 45,
                            GymId = new Guid("f9e5b2ab-7edc-4d33-888f-0ab0c9b9fd0b"),
                            Instructor = "Jake Lewis",
                            Name = "Spinning",
                            StartTimeAndDate = new DateTime(2023, 11, 7, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c9e5a9ff-0d7c-4c8e-c7f6-0b8f5e6d3a6e"),
                            Duration = 50,
                            GymId = new Guid("f9e5b2ab-7edc-4d33-888f-0ab0c9b9fd0b"),
                            Instructor = "Sophie King",
                            Name = "Boxing Basics",
                            StartTimeAndDate = new DateTime(2023, 11, 7, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d0a4b1ff-1f8c-4b6d-d8c5-1c6f5d4f7e7f"),
                            Duration = 60,
                            GymId = new Guid("a3b2c1d4-e8f9-4a02-9b3c-5d2e9f7e1c2f"),
                            Instructor = "William Scott",
                            Name = "Aerobics",
                            StartTimeAndDate = new DateTime(2023, 11, 8, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e1d7c4ff-2e9d-4d7f-e9b6-2d8e6d3a5f4e"),
                            Duration = 60,
                            GymId = new Guid("a3b2c1d4-e8f9-4a02-9b3c-5d2e9f7e1c2f"),
                            Instructor = "Linda Brown",
                            Name = "Advanced Yoga",
                            StartTimeAndDate = new DateTime(2023, 11, 8, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f2a8d3ff-3f1e-4a8b-f1a7-3a7e4b3f5a8d"),
                            Duration = 45,
                            GymId = new Guid("a3b2c1d4-e8f9-4a02-9b3c-5d2e9f7e1c2f"),
                            Instructor = "Michael Taylor",
                            Name = "TRX Training",
                            StartTimeAndDate = new DateTime(2023, 11, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a3c9e2ff-4f2a-4d7a-a2b9-4b8f5d2e7c6e"),
                            Duration = 50,
                            GymId = new Guid("b7c3d8e2-f5a4-4b23-910f-6c9d2e3a7f4e"),
                            Instructor = "Jessica Parker",
                            Name = "Kettlebell Workout",
                            StartTimeAndDate = new DateTime(2023, 11, 8, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b4d1f1ff-5b3c-4d9d-b3f0-5c9f7d3e4b7c"),
                            Duration = 55,
                            GymId = new Guid("b7c3d8e2-f5a4-4b23-910f-6c9d2e3a7f4e"),
                            Instructor = "Eric James",
                            Name = "Functional Fitness",
                            StartTimeAndDate = new DateTime(2023, 11, 8, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c5e7a2ff-6c4d-4c8d-c4b1-6a8e5f2d9c7a"),
                            Duration = 60,
                            GymId = new Guid("b7c3d8e2-f5a4-4b23-910f-6c9d2e3a7f4e"),
                            Instructor = "Olivia Smith",
                            Name = "Dance Cardio",
                            StartTimeAndDate = new DateTime(2023, 11, 8, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d6f1b8ff-7e5f-4f7f-d6c4-7d9f8e4a5b6c"),
                            Duration = 30,
                            GymId = new Guid("c9d1e7f6-b4a3-4c87-92d2-8e1c4f9b2d7e"),
                            Instructor = "Chris Reed",
                            Name = "Morning Run",
                            StartTimeAndDate = new DateTime(2023, 11, 9, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e7a2c4ff-8b6c-4d8e-e7d5-8e9d4b2f7a6e"),
                            Duration = 60,
                            GymId = new Guid("c9d1e7f6-b4a3-4c87-92d2-8e1c4f9b2d7e"),
                            Instructor = "Vanessa Miller",
                            Name = "Strength Circuit",
                            StartTimeAndDate = new DateTime(2023, 11, 9, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f8b3d1ff-9c8d-4e7a-f9c6-9f8e3d5a6c7b"),
                            Duration = 40,
                            GymId = new Guid("c9d1e7f6-b4a3-4c87-92d2-8e1c4f9b2d7e"),
                            Instructor = "David Roberts",
                            Name = "Core Stability",
                            StartTimeAndDate = new DateTime(2023, 11, 9, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.ClassUser", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the Class");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the User");

                    b.HasKey("ClassId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ClassesUsers");
                });

            modelBuilder.Entity("GymHub.Data.Models.Gym", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of Gym");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Address of the Gym");

                    b.Property<int>("ClosingHour")
                        .HasColumnType("int")
                        .HasComment("Closing hour of Gym");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Description of the gym");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The ImageUrl of the Gym");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("The Name of the Gym");

                    b.Property<int>("OpeningHour")
                        .HasColumnType("int")
                        .HasComment("Opening hour of Gym");

                    b.HasKey("Id");

                    b.ToTable("Gyms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5f4b10a-42a1-4f63-8c7f-1a7f9bc8e4e0"),
                            Address = "123 Fitness St, Muscle City, MC 54321",
                            ClosingHour = 22,
                            Description = "A fully equipped gym offering various workout zones, personal training, and group classes.",
                            ImageUrl = "/images/DefaultGym.jfif",
                            IsDeleted = false,
                            Name = "Iron Paradise Gym",
                            OpeningHour = 6
                        },
                        new
                        {
                            Id = new Guid("b21d17f5-9c92-4a72-8b77-33c4f08d8df8"),
                            Address = "456 Strength Ave, Lift Town, LT 98765",
                            ClosingHour = 23,
                            Description = "An exclusive gym focusing on strength training, bodybuilding, and powerlifting.",
                            ImageUrl = "/images/VitalSport.jpeg",
                            IsDeleted = false,
                            Name = "Powerhouse Fitness",
                            OpeningHour = 5
                        },
                        new
                        {
                            Id = new Guid("f9e5b2ab-7edc-4d33-888f-0ab0c9b9fd0b"),
                            Address = "789 Cardio Blvd, Enduro City, EC 12345",
                            ClosingHour = 21,
                            Description = "A cardio-focused gym with a wide variety of machines and group cardio classes.",
                            ImageUrl = "/images/PlanetFitness.jfif",
                            IsDeleted = false,
                            Name = "Planet Fitness",
                            OpeningHour = 5
                        },
                        new
                        {
                            Id = new Guid("a3b2c1d4-e8f9-4a02-9b3c-5d2e9f7e1c2f"),
                            Address = "321 Wellness Way, Calm Town, CT 67890",
                            ClosingHour = 20,
                            Description = "A tranquil fitness space with yoga, Pilates, and meditation classes, along with general fitness facilities.",
                            ImageUrl = "/images/MegaGym.jpg",
                            IsDeleted = false,
                            Name = "Zen Fitness Center",
                            OpeningHour = 7
                        },
                        new
                        {
                            Id = new Guid("b7c3d8e2-f5a4-4b23-910f-6c9d2e3a7f4e"),
                            Address = "101 Summit St, Peakville, PV 34567",
                            ClosingHour = 22,
                            Description = "A high-energy gym specializing in athletic performance and high-intensity interval training.",
                            ImageUrl = "/images/GoldsGym.webp",
                            IsDeleted = false,
                            Name = "Gold's Gym",
                            OpeningHour = 6
                        },
                        new
                        {
                            Id = new Guid("c9d1e7f6-b4a3-4c87-92d2-8e1c4f9b2d7e"),
                            Address = "555 Flex Rd, Movement City, MC 11223",
                            ClosingHour = 23,
                            Description = "A versatile gym with a mix of fitness options, including weightlifting, dance, and mobility classes.",
                            ImageUrl = "/images/DefaultGym.jfif",
                            IsDeleted = false,
                            Name = "Flex & Flow",
                            OpeningHour = 5
                        });
                });

            modelBuilder.Entity("GymHub.Data.Models.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of Membership");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("First name of the person");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the Gym for the membership");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Last name of the person");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Phone number of the person");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Starting Date of the Membership");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("The type of Membership");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the User that made the membership");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("UserId");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("GymHub.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of Review");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the Gym that the review is on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MainBody")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The MainBody of the Review");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("The title of the Review");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the User that posted the review");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("GymHub.Data.Models.Trainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of Trainer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Email of Trainer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("First name of Trainer");

                    b.Property<Guid>("GymId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier of the Gym that the trainer is in");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The ImageUrl of the Trainer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Last name of Trainer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Phone Number of Trainer");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1e7b2ff-4f1a-4c0a-a0c2-1a5f4f57e6d9"),
                            Email = "johndoe@example.com",
                            FirstName = "John",
                            GymId = new Guid("d5f4b10a-42a1-4f63-8c7f-1a7f9bc8e4e0"),
                            ImageUrl = "/images/DefaultTrainer.jfif",
                            LastName = "Doe",
                            PhoneNumber = "+12345678901",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b1c3d8ff-2f9b-4d3d-b0f8-3d7e9b5f9b9c"),
                            Email = "janesmith@example.com",
                            FirstName = "Jane",
                            GymId = new Guid("d5f4b10a-42a1-4f63-8c7f-1a7f9bc8e4e0"),
                            ImageUrl = "/images/Ka.jfif",
                            LastName = "Smith",
                            PhoneNumber = "+19876543210",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c2d5e9ff-3c8e-4d7d-c1f9-4e9f7b8f6c7d"),
                            Email = "alicejohnson@example.com",
                            FirstName = "Alice",
                            GymId = new Guid("b21d17f5-9c92-4a72-8b77-33c4f08d8df8"),
                            ImageUrl = "/images/Ka.jfif",
                            LastName = "Johnson",
                            PhoneNumber = "+11112223333",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d3f6a1ff-5a7b-4e8c-d2f0-5a8f9b4e7d6f"),
                            Email = "bobwilliams@example.com",
                            FirstName = "Bob",
                            GymId = new Guid("d5f4b10a-42a1-4f63-8c7f-1a7f9bc8e4e0"),
                            ImageUrl = "/images/John.jfif",
                            LastName = "Williams",
                            PhoneNumber = "+14445556666",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e4b2c8ff-6f3a-4b9d-e3f1-6b9f4d5f8c7a"),
                            Email = "evebrown@example.com",
                            FirstName = "Eve",
                            GymId = new Guid("b21d17f5-9c92-4a72-8b77-33c4f08d8df8"),
                            ImageUrl = "/images/Ann.jfif",
                            LastName = "Brown",
                            PhoneNumber = "+17778889999",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f5d9e2ff-7c4b-4d5d-f4f2-7c9e4b3f5a7c"),
                            Email = "charliedavis@example.com",
                            FirstName = "Charlie",
                            GymId = new Guid("b21d17f5-9c92-4a72-8b77-33c4f08d8df8"),
                            ImageUrl = "/images/Steven.webp",
                            LastName = "Davis",
                            PhoneNumber = "+19991112222",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a6e7c3ff-8f5c-4c6e-a5f3-8d8f7c6f4e9b"),
                            Email = "meganmartinez@example.com",
                            FirstName = "Megan",
                            GymId = new Guid("f9e5b2ab-7edc-4d33-888f-0ab0c9b9fd0b"),
                            ImageUrl = "/images/Ka.jfif",
                            LastName = "Martinez",
                            PhoneNumber = "+12223334444",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b7f2d1ff-9c6d-4d7f-b6f4-9e7d5c8f3b7d"),
                            Email = "olivergarcia@example.com",
                            FirstName = "Oliver",
                            GymId = new Guid("f9e5b2ab-7edc-4d33-888f-0ab0c9b9fd0b"),
                            ImageUrl = "/images/Dough.jfif",
                            LastName = "Garcia",
                            PhoneNumber = "+15556667777",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c8d5a9ff-0e7a-4e8f-c7f5-0b8f9d5f2a6c"),
                            Email = "sophiamiller@example.com",
                            FirstName = "Sophia",
                            GymId = new Guid("f9e5b2ab-7edc-4d33-888f-0ab0c9b9fd0b"),
                            ImageUrl = "/images/Ann.jfif",
                            LastName = "Miller",
                            PhoneNumber = "+18889991111",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d9b1c4ff-1a8b-4c7a-d8f6-1c7e6d5f9b2c"),
                            Email = "liamwilson@example.com",
                            FirstName = "Liam",
                            GymId = new Guid("a3b2c1d4-e8f9-4a02-9b3c-5d2e9f7e1c2f"),
                            ImageUrl = "/images/Paul.png",
                            LastName = "Wilson",
                            PhoneNumber = "+19992224455",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e0f2d8ff-2b9c-4d5e-e9f7-2d8f7c4a5b3d"),
                            Email = "emmaanderson@example.com",
                            FirstName = "Emma",
                            GymId = new Guid("a3b2c1d4-e8f9-4a02-9b3c-5d2e9f7e1c2f"),
                            ImageUrl = "/images/Ann.jfif",
                            LastName = "Anderson",
                            PhoneNumber = "+14445557777",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f1a7b3ff-3c0a-4e9b-f1f8-3a7f5d2b6e9c"),
                            Email = "jamesthomas@example.com",
                            FirstName = "James",
                            GymId = new Guid("b7c3d8e2-f5a4-4b23-910f-6c9d2e3a7f4e"),
                            ImageUrl = "/images/DefaultTrainer.jfif",
                            LastName = "Thomas",
                            PhoneNumber = "+17773336666",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a2e8c9ff-4d1b-4d7a-a2f9-4c8e7f5a9b0d"),
                            Email = "ellataylor@example.com",
                            FirstName = "Ella",
                            GymId = new Guid("b7c3d8e2-f5a4-4b23-910f-6c9d2e3a7f4e"),
                            ImageUrl = "/images/Ka.jfif",
                            LastName = "Taylor",
                            PhoneNumber = "+12225558888",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b3d6a2ff-5f2c-4c9e-b3f0-5e9f7d2c4a7b"),
                            Email = "lucasmoore@example.com",
                            FirstName = "Lucas",
                            GymId = new Guid("c9d1e7f6-b4a3-4c87-92d2-8e1c4f9b2d7e"),
                            ImageUrl = "/images/Dough.jfif",
                            LastName = "Moore",
                            PhoneNumber = "+19994441111",
                            isDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c4b7e1ff-6a3d-4b8d-c4f1-6a9e5c3f9b7c"),
                            Email = "avajackson@example.com",
                            FirstName = "Ava",
                            GymId = new Guid("c9d1e7f6-b4a3-4c87-92d2-8e1c4f9b2d7e"),
                            ImageUrl = "/images/Ann.jfif",
                            LastName = "Jackson",
                            PhoneNumber = "+13335557777",
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymHub.Data.Models.Class", b =>
                {
                    b.HasOne("GymHub.Data.Models.Gym", "Gym")
                        .WithMany("Classes")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("GymHub.Data.Models.ClassUser", b =>
                {
                    b.HasOne("GymHub.Data.Models.Class", "Class")
                        .WithMany("ClassesUsers")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymHub.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymHub.Data.Models.Membership", b =>
                {
                    b.HasOne("GymHub.Data.Models.Gym", "Gym")
                        .WithMany("Memberships")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymHub.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymHub.Data.Models.Review", b =>
                {
                    b.HasOne("GymHub.Data.Models.Gym", "Gym")
                        .WithMany("Reviews")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymHub.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymHub.Data.Models.Trainer", b =>
                {
                    b.HasOne("GymHub.Data.Models.Gym", "Gym")
                        .WithMany("Trainers")
                        .HasForeignKey("GymId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GymHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GymHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GymHub.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymHub.Data.Models.Class", b =>
                {
                    b.Navigation("ClassesUsers");
                });

            modelBuilder.Entity("GymHub.Data.Models.Gym", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Memberships");

                    b.Navigation("Reviews");

                    b.Navigation("Trainers");
                });
#pragma warning restore 612, 618
        }
    }
}
